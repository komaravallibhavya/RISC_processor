//timescale 
`timescale 1ns/1ps 
//module definition 
module main_test(); 
//variable decleration 
//regs 
reg clk; 
reg reset; 
reg ram_we=0; 
reg [15:0]dataI=0; 
//wires 
wire [2:0] selA; 
wire [2:0]selB; 
wire [2:0] selD; 
wire [15:0]dataA; 
wire [15:0]dataB; 
wire [15:0]dataD; 
wire [1:0]opcode; 
wire[4:0]aluop; 
wire[7:0]imm; 
wire [15:0]dataO; 
wire [15:0]pcO; 
wire shldBranch; 
wire enfetch; 
wire enalu; 
wire endec; 
wire enmem; 
wire enrgrd; 
wire enrgwr; 
wire regwe; 
wire update; 
//assigning 
assign enrgwr=regwe & update; 
assign opcode=(reset)?2'b11: ((shldBranch ?2'b10: 
((enmem)?2'b01: 2'b00))); 
//instantiations 
 reg_file main_reg( 
//inputs 
clk, 
enrgrd, 
enrgwr, 
selA, 
selB, 
selD, 
dataD, 
//outputs 
dataA, 
dataB 
); 
inst_dec main_inst( 
//inputs 
clk, 
endec, 
dataO, 
//outputs 
aluop, 
selA, 
selB, 
selD, 
imm, 
regwe 
); 
alu main_alu( 
//inputs 
clk, 
enalu, 
aluop, 
dataA, 
dataB, 
imm, 
//outputs 
dataD, 
shldBranch 
); 
ctrl_unit main_ctrl( 
//inputs 
clk, 
reset, 
//outputs 
enfetch, 
endec, 
enrgrd, 
enalu, 
update, 
enmem 
); 
pc_unit main_pc( 
//inputs 
clk, 
opcode, 
dataD, 
//outputs 
pcO 
); 
fake_ram main_ram( 
//inputs 
clk, 
ram_we, 
pcO, 
dataI, 
//outputs 
dataO 
); 
initial begin 
clk=0; 
reset=1; 
#20 
reset=0; 
end 
//clock generation 
always begin 
 #5; 
 clk=~clk; 
end 
endmodule 
